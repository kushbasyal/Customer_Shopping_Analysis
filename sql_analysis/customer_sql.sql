Create database customer_shoping;
use customer_shoping;
CREATE TABLE sales_data (
    invoice_date DATE,
    invoice_no VARCHAR(20) PRIMARY KEY,
    customer_id VARCHAR(20),
    gender ENUM('Male', 'Female'),
    age INT,
    category VARCHAR(100),
    quantity INT,
    price DECIMAL(10,2),
    payment_method VARCHAR(50),
    shopping_mall VARCHAR(100),
    Revenue DECIMAL(15,2),
    age_category VARCHAR(20)
);

select * from sales_data;
select count(*) from sales_data;

select * from sales_data;

-- 1.What is the total revenue generated from all transactions?

SELECT 
    SUM(Revenue) AS Total_Revenue
FROM
    sales_data;
    
-- 2.How many total transactions (invoices) were made?

SELECT 
    COUNT(DISTINCT invoice_no)
FROM
    sales_data;
    
-- 3.What is the total quantity of items sold across all categories?

SELECT 
    SUM(quantity) AS Total_Quantity
FROM
    sales_data;
    
-- 4. How many unique customers are there in the dataset?
SELECT 
    COUNT(DISTINCT customer_id)
FROM
    sales_data;

-- 5. What is the total revenue generated by each payment method?

SELECT 
    payment_method, SUM(Revenue) AS total_revenue
FROM
    sales_data
GROUP BY payment_method;

-- 6. What is the average quantity of items purchased by each gender?

SELECT 
    gender, AVG(quantity) AS avg_quantity
FROM
    sales_data
GROUP BY gender;

-- 7. What is the total revenue and quantity sold for each product category?

SELECT 
    category,
    SUM(quantity) AS total_quantity_sold,
    SUM(Revenue) AS total_revenue_generated
FROM
    sales_data
GROUP BY category;

-- 8.What is the total revenue, and quantity sold by each shopping mall?

SELECT 
    shopping_mall,
    SUM(Revenue) AS Total_Revenue,
    SUM(quantity) AS Quantity_Sold
FROM
    sales_data
GROUP BY shopping_mall;

-- 9.How many unique customers have shopped at each shopping mall?

SELECT 
    shopping_mall,
    COUNT(DISTINCT customer_id) AS unique_customers
FROM
    sales_data
GROUP BY shopping_mall;

-- 10.Find invoices where the revenue is greater than the average revenue per invoice.

SELECT 
    invoice_no, Revenue
FROM
    sales_data
WHERE
    Revenue > (SELECT 
            AVG(Revenue)
        FROM
            sales_data);

-- 11. List the categories where total quantity sold is higher than the average quantity sold across all categories.

WITH category_totals AS (
    SELECT category, SUM(quantity) AS total_quantity
    FROM sales_data
    GROUP BY category
),
avg_quantity AS (
    SELECT AVG(total_quantity) AS avg_qty FROM category_totals
)
SELECT category, total_quantity
FROM category_totals, avg_quantity
WHERE total_quantity > avg_qty;


-- 12. Find the customers whose total spending is above the average customer spending.

WITH customer_totals AS (
    SELECT 
        customer_id, 
        SUM(Revenue) AS total_spending
    FROM sales_data
    GROUP BY customer_id
),
avg_spending AS (
    SELECT AVG(total_spending) AS avg_total
    FROM customer_totals
)
SELECT 
    customer_id, 
    total_spending
FROM 
    customer_totals
WHERE 
    total_spending > (SELECT avg_total FROM avg_spending);
    
-- 13.  Daily revenue with cumulative revenue trend (total over time)

WITH daily_revenue AS (
    SELECT 
        invoice_date,
        SUM(Revenue) AS total_revenue
    FROM sales_data
    GROUP BY invoice_date
)
SELECT 
    invoice_date,
    total_revenue,
    SUM(total_revenue) OVER (ORDER BY invoice_date) AS cumulative_revenue
FROM daily_revenue
ORDER BY invoice_date;

-- 14.  Which customers have generated the highest total revenue? List all customers tied for the top spot along with their total revenue.
WITH customer_revenue AS (
    SELECT 
        customer_id, 
        SUM(Revenue) AS total_revenue,
        RANK() OVER (ORDER BY SUM(Revenue) DESC) AS revenue_rank
    FROM sales_data
    GROUP BY customer_id
)
SELECT 
    customer_id, 
    total_revenue
FROM customer_revenue
WHERE revenue_rank = 1;


-- 15.What is the month-over-month revenue change for each product category?alter

WITH monthly_category_revenue AS (
    SELECT 
        category,
        DATE_FORMAT(invoice_date, '%Y-%m') AS yearly_month,
        SUM(Revenue) AS total_monthly_revenue
    FROM sales_data
    GROUP BY category, DATE_FORMAT(invoice_date, '%Y-%m')
)
SELECT 
    category,
    yearly_month,
    total_monthly_revenue AS current_month_revenue,
    LAG(total_monthly_revenue) OVER (
        PARTITION BY category ORDER BY yearly_month
    ) AS previous_month_revenue,
    total_monthly_revenue - LAG(total_monthly_revenue) OVER (
        PARTITION BY category ORDER BY yearly_month
    ) AS revenue_difference
FROM monthly_category_revenue;

























