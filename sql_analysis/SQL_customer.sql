Create database customer_shoping;
use customer_shoping;
CREATE TABLE sales_data (
    invoice_date DATE,
    invoice_no VARCHAR(20) PRIMARY KEY,
    customer_id VARCHAR(20),
    gender ENUM('Male', 'Female'),
    age INT,
    category VARCHAR(100),
    quantity INT,
    price DECIMAL(10,2),
    payment_method VARCHAR(50),
    shopping_mall VARCHAR(100),
    Revenue DECIMAL(15,2),
    age_category VARCHAR(20)
);

select * from sales_data;
select count(*) from sales_data;

-- Calculate the total revenue generated from all sales.

SELECT 
    SUM(Revenue) AS total_revenue
FROM
    sales_data;
    
-- Count the total number of unique invoices.

SELECT 
    COUNT(DISTINCT invoice_no) AS total_invoices
FROM
    sales_data;
    
-- Find the average quantity sold per order.

SELECT 
    AVG(quantity) AS avg_quantity_per_order
FROM
    sales_data;

-- List all distinct product categories.

SELECT DISTINCT
    category
FROM
    sales_data;

-- Find the total revenue generated by each shopping mall.

SELECT 
    shopping_mall, SUM(Revenue) AS total_revenue
FROM
    sales_data
GROUP BY shopping_mall
ORDER BY total_revenue DESC;

-- Calculate the monthly total revenue.

SELECT 
    DATE_FORMAT(invoice_date, '%Y-%m') AS month,
    SUM(Revenue) AS monthly_revenue
FROM
    sales_data
GROUP BY month
ORDER BY month;

-- Identify the top 3 highest revenue-generating product categories.

SELECT 
    category, SUM(Revenue) AS total_revenue
FROM
    sales_data
GROUP BY category
ORDER BY total_revenue DESC
LIMIT 3;

-- Find the average price for each product category.

SELECT 
    category, AVG(price) AS avg_price
FROM
    sales_data
GROUP BY category;

-- Count the number of sales made by each payment method.

SELECT payment_method, COUNT(*) AS total_orders
FROM sales_data
GROUP BY payment_method;

-- List customers over the age of 60 who spent more than 1000 in a single order.

SELECT 
    customer_id, age, Revenue
FROM
    sales_data
WHERE
    age > 60 AND Revenue > 1000;

-- Rank the product categories by total revenue.

SELECT category, SUM(Revenue) AS total_revenue,
       RANK() OVER (ORDER BY SUM(Revenue) DESC) AS revenue_rank
FROM sales_data
GROUP BY category;

-- Find the top spending customer

SELECT 
    customer_id, SUM(Revenue) AS total_spent
FROM
    sales_data
GROUP BY customer_id
ORDER BY total_spent DESC
LIMIT 1;

-- find total revenue per month and label months above average revenue.

WITH monthly_rev AS (
  SELECT DATE_FORMAT(invoice_date, '%Y-%m') AS month, SUM(Revenue) AS total_revenue
  FROM sales_data
  GROUP BY month
)
SELECT month, total_revenue,
       CASE WHEN total_revenue > (SELECT AVG(total_revenue) FROM monthly_rev)
            THEN 'Above Average'
            ELSE 'Below Average' END AS revenue_level
FROM monthly_rev;

-- Identify which shopping mall sells the highest quantity of items.

SELECT 
    shopping_mall, SUM(quantity) AS total_quantity
FROM
    sales_data
GROUP BY shopping_mall
ORDER BY total_quantity DESC
LIMIT 1;

-- Find the number of male vs. female customers.

SELECT 
    gender, COUNT(DISTINCT customer_id) AS total_customers
FROM
    sales_data
GROUP BY gender;

-- Calculate the cumulative daily revenue, ordered by each date.

SELECT 
    invoice_date,
    SUM(Revenue) AS daily_revenue,
    SUM(SUM(Revenue)) OVER (ORDER BY invoice_date) AS cumulative_revenue
FROM 
    sales_data
GROUP BY 
    invoice_date
ORDER BY 
    invoice_date;

-- Find the difference in monthly revenue between the current and next month.

WITH monthly_revenue AS (
    SELECT 
        DATE_FORMAT(invoice_date, '%Y-%m') AS month,
        SUM(Revenue) AS total_revenue
    FROM 
        sales_data
    GROUP BY 
        DATE_FORMAT(invoice_date, '%Y-%m')
)
SELECT 
    month,
    total_revenue,
    LEAD(total_revenue) OVER (ORDER BY month) AS next_month_revenue,
    LEAD(total_revenue) OVER (ORDER BY month) - total_revenue AS revenue_difference
FROM 
    monthly_revenue;

-- Which product categories generate the most revenue?

SELECT
    category,
    SUM(revenue) AS total_revenue,
    RANK() OVER (ORDER BY SUM(revenue) DESC) AS category_rank
FROM sales_data
GROUP BY category;












